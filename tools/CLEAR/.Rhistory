#wfabc
lang_stats <- character(3)
lang_stats[1] <- num_of_alleles
lang_stats[2] <- gen_time
lang_stats[3] <- '\n'
wfabc_estimates <- wfabc_estimation_lang(full_lang_matrix, lang_stats)
rmse_wfabc <- c(rmse_wfabc, (rmse(real_sel, wfabc_estimates))/mean(real_sel))
print('WFABC')
print(rmse_wfabc)
#slattice
slattice_estimates <- slattice_estimation_lang(full_lang_matrix, gen, N, gen_time)
rmse_slattice <- c(rmse_slattice, (rmse(real_sel, slattice_estimates))/mean(real_sel))
print('slattice')
print(rmse_slattice)
}
}
set_of_vectors <- list(rmse_clear, rmse_lls, rmse_slattice, rmse_wfabc)
set_of_estimates <- list(clear_estimates, lls_estimates, slattice_estimates, wfabc_estimates)
#wfabc function
wfabc_estimation_lang <- function(your_dataset, stats){
#create template
setwd('~/sweden/master_thesis/stelkens/tools/WFABC_v1.1/WFABC_v1.1/sources/')
fileConn<-file("~/sweden/master_thesis/stelkens/tools/WFABC_v1.1/WFABC_v1.1/sources/multiple_loci.txt")
writeLines(stats, sep = " ", fileConn)
close(fileConn)
#handle data
num_of_loci <- nrow(your_dataset)
gen_available <- gen/100
sample_size <- rep(1, times=12)
alleleFreqs <-vector()
for(replica in 1:num_of_loci){ #num of loci
alleleFreqs <- c(alleleFreqs, sample_size)
alleleFreqs <- c(alleleFreqs, as.matrix(your_dataset[replica,]))
}
#save data in wfabc format
alleleFreqs <- c(gen_available, alleleFreqs)
dim(alleleFreqs) <- c(12,(num_of_loci*2)+1) #num of loci*2
alleleFreqs_t <- as.data.frame(t(alleleFreqs))
alleleFreqs_t <- as.data.frame(ceiling(alleleFreqs_t*100))
alleleFreqs_t$V12 <- sub("$", ",", alleleFreqs_t$V12)
write.table(alleleFreqs_t, file = "~/sweden/master_thesis/stelkens/tools/WFABC_v1.1/WFABC_v1.1/sources/multiple_loci.txt",
sep = ",", row.names = F, col.names = F, quote = FALSE, append = TRUE)
#run wfabc
system('bash -c "./wfabc_1 multiple_loci.txt; ./wfabc_2 -fixed_N 1000 -min_s -0.5 -max_s 0.5 multiple_loci.txt"') #2433 loci?? bin??
post_s=read.table("~/sweden/master_thesis/stelkens/tools/WFABC_v1.1/WFABC_v1.1/sources/multiple_loci_posterior_s.txt")
estimated_wfabc <- rowMeans(post_s)
return(estimated_wfabc)
}
#clear function
clear_estimation_lang <- function(allele_freqs_selected, stats){
#create template
setwd('~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/')
#fileConn<-file("~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.pops")
#writeLines(paste0(gen, c(rep(",1", num_of_gen))), sep = "\t", fileConn)
#close(fileConn)
allele_freqs_selected <- as.data.frame(allele_freqs_selected)
alleleFreqs_full <-vector()
alleleFreqs <- vector()
for (row in 1:nrow(allele_freqs_selected)){
alleleFreqs_initial <- c(alleleFreqs, allele_freqs_selected[row,])
alleleFreqs_middle <- vector()
alleleFreqs_complete <- vector()
for (i in alleleFreqs_initial){
alleleFreqs_middle <- c(alleleFreqs_middle, paste(as.integer(i*100),':',100-(i*100),
":0:0:0:0", sep = ""))
}
alleleFreqs_complete <- c('2L', sample(1:100000000, 1), 'T', alleleFreqs_middle)
alleleFreqs_full <- c(alleleFreqs_full, alleleFreqs_complete)
}
dim(alleleFreqs_full) <- stats
alleleFreqs_t <- as.data.frame(t(alleleFreqs_full))
write.table(alleleFreqs_t, file = "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.sync",
sep = "\t", row.names = F, col.names = F, quote = FALSE)
clear_pop_file <- "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.pops"
fileConn<-file(clear_pop_file)
clear_string <- paste(gen, ',1\t', collapse = "", sep="")
clear_string <- substr(clear_string, 1, nchar(clear_string)-1)
writeLines(clear_string, fileConn)
close(fileConn)
setwd('~/sweden/master_thesis/stelkens/tools/CLEAR')
use_condaenv(condaenv = 'py2', conda = 'auto', required = TRUE)
py_discover_config()
system('bash -c "python2 demo.py"')
s_distr_clear=read.table("~/sweden/master_thesis/stelkens/tools/CLEAR/output_variant_scores.csv", header=TRUE, sep = '\t')
return(s_distr_clear$s)
}
#slattice function
slattice_estimation_lang <- function(your_dataset, your_gen, your_ne, your_gen_time){
slattice_estimation <- function(your_row){
your_row <- as.matrix(your_row)
df_slattice <- data.frame(N = rep(0, times=your_gen[length(your_gen)]+1), N.A = rep(0, times=your_gen[length(your_gen)]+1))
df_slattice[seq(1, nrow(df_slattice), 84), ] = data.frame(N = rep(your_ne, times=your_gen_time+1), N.A = rep(your_ne, times=your_gen_time+1))
df_slattice[seq(1, nrow(df_slattice), 84), ][2] = df_slattice[seq(1, nrow(df_slattice), 84), ][2]*your_row
df_slattice$N.A <- as.integer(df_slattice$N.A)
estimate <- estimate.s(df_slattice, your_ne, method="Hard EM", verbose = FALSE)
print(your_row)
return(estimate)
}
your_dataset <- as.data.frame(your_dataset)
slattice_estimates <- by(your_dataset, 1:nrow(your_dataset), function(row) slattice_estimation(row))
s_distr_slattice <- subListExtract(slattice_estimates, "s", simplify = FALSE, keep.names = TRUE)
s_distr_slattice <- unlist(s_distr_slattice, use.names=FALSE)
return(s_distr_slattice)
}
#plot vectors function
means_and_sd <- function(your_vector){
dim(your_vector) <- c(3,7)
your_vector <- as.data.frame(your_vector)
your_vector_means <- apply(your_vector,2,mean)
your_vector_sd <- apply(your_vector,2,sd)
return(list(your_vector_means, your_vector_sd))
}
# set params
gen <- c(1,140,240,335,415,505,585,665,745,825,910,1000)
N <- 1000
gen_time <- 12
real_slope_vector <- c(0)
#real_slope_vector <- c(-1,0,0.2,0.4,0.6,0.8,1)
#vectors with s
rmse_lls <- vector()
rmse_clear <- vector()
rmse_wfabc <- vector()
rmse_slattice <- vector()
for (real_sel_coeff in real_slope_vector){
#read data
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > real_sel_coeff) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#filter null alleles
#pv<-analyNullSimP(full_lang_matrix[,1],full_lang_matrix[,12],t=100,ne=1000,lower=TRUE) ## input p0,p1,generation time, ne
#output_logit<-log(pv/(1-pv)) ## Outputs logit
#rows_to_keep <- (which(abs(output_logit) > bnd)) # all 53 are not null
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix == 0] <- 0.02
full_lang_matrix[full_lang_matrix == 1] <- 0.98
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
for (replica in 1:3){
print('num of alleles and replica:')
print(num_of_alleles)
print(replica)
#lls
lls_estimates <- by(full_lang_matrix, 1:nrow(full_lang_matrix), function(row) estimateSH(row, t=gen,
Ne=N, haploid = FALSE, h = 0.5))
lls_estimates <- subListExtract(lls_estimates, "s", simplify = FALSE, keep.names = TRUE)
lls_estimates <- unlist(lls_estimates, use.names=FALSE)
rmse_lls <- c(rmse_lls, (rmse(real_sel, lls_estimates))/mean(real_sel))
print('LLS')
print(rmse_lls)
#clear
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
#wfabc
lang_stats <- character(3)
lang_stats[1] <- num_of_alleles
lang_stats[2] <- gen_time
lang_stats[3] <- '\n'
wfabc_estimates <- wfabc_estimation_lang(full_lang_matrix, lang_stats)
rmse_wfabc <- c(rmse_wfabc, (rmse(real_sel, wfabc_estimates))/mean(real_sel))
print('WFABC')
print(rmse_wfabc)
#slattice
slattice_estimates <- slattice_estimation_lang(full_lang_matrix, gen, N, gen_time)
rmse_slattice <- c(rmse_slattice, (rmse(real_sel, slattice_estimates))/mean(real_sel))
print('slattice')
print(rmse_slattice)
}
}
set_of_vectors <- list(rmse_clear, rmse_lls, rmse_slattice, rmse_wfabc)
set_of_estimates <- list(clear_estimates, lls_estimates, slattice_estimates, wfabc_estimates)
#lls
lls_estimates <- by(full_lang_matrix, 1:nrow(full_lang_matrix), function(row) estimateSH(row, t=gen,
Ne=N, haploid = FALSE, h = 0.5))
lls_estimates <- subListExtract(lls_estimates, "s", simplify = FALSE, keep.names = TRUE)
lls_estimates <- unlist(lls_estimates, use.names=FALSE)
real_sel_coeff <- 0
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > real_sel_coeff) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#filter null alleles
#pv<-analyNullSimP(full_lang_matrix[,1],full_lang_matrix[,12],t=100,ne=1000,lower=TRUE) ## input p0,p1,generation time, ne
#output_logit<-log(pv/(1-pv)) ## Outputs logit
#rows_to_keep <- (which(abs(output_logit) > bnd)) # all 53 are not null
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix == 0] <- 0.02
full_lang_matrix[full_lang_matrix == 1] <- 0.98
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#lls
lls_estimates <- by(full_lang_matrix, 1:nrow(full_lang_matrix), function(row) estimateSH(row, t=gen,
Ne=N, haploid = FALSE, h = 0.5))
lls_estimates <- subListExtract(lls_estimates, "s", simplify = FALSE, keep.names = TRUE)
lls_estimates <- unlist(lls_estimates, use.names=FALSE)
rmse_lls <- c(rmse_lls, (rmse(real_sel, lls_estimates))/mean(real_sel))
print('LLS')
print(rmse_lls)
lang_stats <- character(3)
lang_stats[1] <- num_of_alleles
lang_stats[2] <- gen_time
lang_stats[3] <- '\n'
wfabc_estimates <- wfabc_estimation_lang(full_lang_matrix, lang_stats)
rmse_wfabc <- c(rmse_wfabc, (rmse(real_sel, wfabc_estimates))/mean(real_sel))
print('WFABC')
print(rmse_wfabc)
#clear
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
clear_estimates
View(full_lang_matrix)
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix < 0.02] <- 0.02
full_lang_matrix[full_lang_matrix > 0.98] <- 0.98
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > -1) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
length(full_lang_cleaned)
length(full_lang_cleaned[,1])
#clear
num_of_alleles <- length(full_lang_cleaned[,1])
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > 0) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
clear_estimates
View(full_lang_matrix)
#read data
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > -1) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#filter null alleles
#pv<-analyNullSimP(full_lang_matrix[,1],full_lang_matrix[,12],t=100,ne=1000,lower=TRUE) ## input p0,p1,generation time, ne
#output_logit<-log(pv/(1-pv)) ## Outputs logit
#rows_to_keep <- (which(abs(output_logit) > bnd)) # all 53 are not null
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix < 0.02] <- 0.02
full_lang_matrix[full_lang_matrix > 0.98] <- 0.98
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
#clear function
clear_estimation_lang <- function(allele_freqs_selected, stats){
#create template
setwd('~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/')
#fileConn<-file("~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.pops")
#writeLines(paste0(gen, c(rep(",1", num_of_gen))), sep = "\t", fileConn)
#close(fileConn)
allele_freqs_selected <- as.data.frame(allele_freqs_selected)
alleleFreqs_full <-vector()
alleleFreqs <- vector()
for (row in 1:nrow(allele_freqs_selected)){
alleleFreqs_initial <- c(alleleFreqs, allele_freqs_selected[row,])
alleleFreqs_middle <- vector()
alleleFreqs_complete <- vector()
for (i in alleleFreqs_initial){
alleleFreqs_middle <- c(alleleFreqs_middle, paste(as.integer(i*100),':',100-(i*100),
":0:0:0:0", sep = ""))
}
alleleFreqs_complete <- c('2L', sample(1:100000000, 1), 'T', alleleFreqs_middle)
alleleFreqs_full <- c(alleleFreqs_full, alleleFreqs_complete)
}
dim(alleleFreqs_full) <- stats
alleleFreqs_t <- as.data.frame(t(alleleFreqs_full))
write.table(alleleFreqs_t, file = "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.sync",
sep = "\t", row.names = F, col.names = F, quote = FALSE)
#clear_pop_file <- "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.pops"
#fileConn<-file(clear_pop_file)
#clear_string <- paste(gen, ',1\t', collapse = "", sep="")
#clear_string <- substr(clear_string, 1, nchar(clear_string)-1)
#writeLines(clear_string, fileConn)
#close(fileConn)
setwd('~/sweden/master_thesis/stelkens/tools/CLEAR')
use_condaenv(condaenv = 'py2', conda = 'auto', required = TRUE)
py_discover_config()
system('bash -c "python2 demo.py"')
s_distr_clear=read.table("~/sweden/master_thesis/stelkens/tools/CLEAR/output_variant_scores.csv", header=TRUE, sep = '\t')
return(s_distr_clear$s)
}
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > 0) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#filter null alleles
#pv<-analyNullSimP(full_lang_matrix[,1],full_lang_matrix[,12],t=100,ne=1000,lower=TRUE) ## input p0,p1,generation time, ne
#output_logit<-log(pv/(1-pv)) ## Outputs logit
#rows_to_keep <- (which(abs(output_logit) > bnd)) # all 53 are not null
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix < 0.02] <- 0.02
full_lang_matrix[full_lang_matrix > 0.98] <- 0.98
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
rmse_clear
clear_estimates
#read data
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > -1) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#filter null alleles
#pv<-analyNullSimP(full_lang_matrix[,1],full_lang_matrix[,12],t=100,ne=1000,lower=TRUE) ## input p0,p1,generation time, ne
#output_logit<-log(pv/(1-pv)) ## Outputs logit
#rows_to_keep <- (which(abs(output_logit) > bnd)) # all 53 are not null
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix < 0.02] <- 0.02
full_lang_matrix[full_lang_matrix > 0.98] <- 0.98
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
lang_stats <- c(gen_time+3, num_of_alleles)
clear_estimates <- clear_estimation_lang(full_lang_matrix, lang_stats)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
#real_slope_vector <- c(-1,0,0.2,0.4,0.6,0.8,1)
vector_with_generations <- gen
#clear function
clear_estimation_lang <- function(allele_freqs_selected){
allele_freqs_selected <- as.data.frame(allele_freqs_selected)
#allele_freqs_selected <- allele_freqs_selected[,2:5]
alleleFreqs_full <-vector()
alleleFreqs <- vector()
for (row in 1:nrow(allele_freqs_selected)){
alleleFreqs_initial <- c(alleleFreqs, allele_freqs_selected[row,])
alleleFreqs_middle <- vector()
alleleFreqs_complete <- vector()
for (i in alleleFreqs_initial){
alleleFreqs_middle <- c(alleleFreqs_middle, paste(as.numeric(i*100),':',100-(i*100),
":0:0:0:0", sep = ""))
}
alleleFreqs_complete <- c('2L', sample(1:100000000, 1), 'T', alleleFreqs_middle)
alleleFreqs_full <- c(alleleFreqs_full, alleleFreqs_complete)
}
gen_time1 <- length(vector_with_generations)
n_row1 <- length(allele_freqs_selected[,1])
stats_c <- c(gen_time1+3, n_row1)
dim(alleleFreqs_full) <- stats_c
alleleFreqs_t <- as.data.frame(t(alleleFreqs_full))
write.table(alleleFreqs_t, file = "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.sync",
sep = "\t", row.names = F, col.names = F, quote = FALSE)
clear_pop_file <- "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.pops"
fileConn<-file(clear_pop_file)
clear_string <- paste(vector_with_generations, ',1\t', collapse = "", sep="")
clear_string <- substr(clear_string, 1, nchar(clear_string)-1)
writeLines(clear_string, fileConn)
close(fileConn)
setwd('~/sweden/master_thesis/stelkens/tools/CLEAR')
use_condaenv(condaenv = 'py2', conda = 'auto', required = TRUE)
py_discover_config()
system('bash -c "python2 demo.py"')
s_distr_clear=read.table("~/sweden/master_thesis/stelkens/tools/CLEAR/output_variant_scores.csv", header=TRUE, sep = '\t')
return(s_distr_clear)
}
clear_estimates <- clear_estimation_lang(full_lang_matrix)
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
clear_estimates <- clear_estimates$s
clear_estimates
#read data
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > -1) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
View(full_lang_matrix)
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > -1) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#filter null alleles
#pv<-analyNullSimP(full_lang_matrix[,1],full_lang_matrix[,12],t=100,ne=1000,lower=TRUE) ## input p0,p1,generation time, ne
#output_logit<-log(pv/(1-pv)) ## Outputs logit
#rows_to_keep <- (which(abs(output_logit) > bnd)) # all 53 are not null
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix < 0.02] <- 0.02
full_lang_matrix[full_lang_matrix > 0.98] <- 0.98
View(full_lang_matrix)
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
clear_estimates <- clear_estimation_lang(full_lang_matrix)
clear_estimates <- clear_estimates$s
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
#clear function
clear_estimation_lang <- function(allele_freqs_selected){
allele_freqs_selected <- as.data.frame(allele_freqs_selected)
#allele_freqs_selected <- allele_freqs_selected[,2:5]
alleleFreqs_full <-vector()
alleleFreqs <- vector()
for (row in 1:nrow(allele_freqs_selected)){
alleleFreqs_initial <- c(alleleFreqs, allele_freqs_selected[row,])
alleleFreqs_middle <- vector()
alleleFreqs_complete <- vector()
for (i in alleleFreqs_initial){
alleleFreqs_middle <- c(alleleFreqs_middle, paste(as.numeric(i*100),':',100-(i*100),
":0:0:0:0", sep = ""))
}
alleleFreqs_complete <- c('2L', sample(1:100000000, 1), 'T', alleleFreqs_middle)
alleleFreqs_full <- c(alleleFreqs_full, alleleFreqs_complete)
}
gen_time1 <- length(vector_with_generations)
n_row1 <- length(allele_freqs_selected[,1])
stats_c <- c(gen_time1+3, n_row1)
dim(alleleFreqs_full) <- stats_c
alleleFreqs_t <- as.data.frame(t(alleleFreqs_full))
write.table(alleleFreqs_t, file = "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.sync",
sep = "\t", row.names = F, col.names = F, quote = FALSE)
#  clear_pop_file <- "~/sweden/master_thesis/stelkens/tools/CLEAR/sample_data/popoolation2/F37.pops"
#  fileConn<-file(clear_pop_file)
#  clear_string <- paste(vector_with_generations, ',1\t', collapse = "", sep="")
#  clear_string <- substr(clear_string, 1, nchar(clear_string)-1)
#  writeLines(clear_string, fileConn)
#  close(fileConn)
setwd('~/sweden/master_thesis/stelkens/tools/CLEAR')
use_condaenv(condaenv = 'py2', conda = 'auto', required = TRUE)
py_discover_config()
system('bash -c "python2 demo.py"')
s_distr_clear=read.table("~/sweden/master_thesis/stelkens/tools/CLEAR/output_variant_scores.csv", header=TRUE, sep = '\t')
return(s_distr_clear)
}
full_lang <- read.table("/home/erik/sweden/master_thesis/stelkens/real_data_with_fitness/lang_data_full.csv", header=TRUE, skip=2, sep = ',')
full_lang <- subset(full_lang, full_lang$slope..s. != "",)
full_lang$slope..s. <- as.numeric(lapply(full_lang$slope..s., gsub, pattern='%', replacement=''))
full_lang <- subset(full_lang, full_lang$slope..s. > 0) #from 0 to 1
full_lang_matrix <- as.matrix(full_lang[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
real_sel <- full_lang$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
#filter null alleles
#pv<-analyNullSimP(full_lang_matrix[,1],full_lang_matrix[,12],t=100,ne=1000,lower=TRUE) ## input p0,p1,generation time, ne
#output_logit<-log(pv/(1-pv)) ## Outputs logit
#rows_to_keep <- (which(abs(output_logit) > bnd)) # all 53 are not null
full_lang_cleaned <- full_lang
full_lang_matrix <- as.matrix(full_lang_cleaned[,(length(full_lang[1,])-length(gen)+1):length(full_lang[1,])])
full_lang_matrix[full_lang_matrix < 0.02] <- 0.02
full_lang_matrix[full_lang_matrix > 0.98] <- 0.98
real_sel <- full_lang_cleaned$slope..s.*0.01
num_of_alleles <- length(full_lang_matrix[,1])
rmse_clear <- NULL
clear_estimates <- clear_estimation_lang(full_lang_matrix)
clear_estimates <- clear_estimates$s
rmse_clear <- c(rmse_clear, (rmse(real_sel, clear_estimates))/mean(real_sel))
print('CLEAR')
print(rmse_clear)
clear_estimates
